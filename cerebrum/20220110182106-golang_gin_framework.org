:PROPERTIES:
:ID:       24424aa6-5b02-4d77-ade8-3fbdb58621eb
:END:
#+title: Golang gin framework
#+begin_src go

package main

import (
  "net/http"

  "github.com/gin-gonic/gin"
)

type album struct {
  ID     string  `json:id`
  Title  string  `json:title`
  Artist string  `json:artist`
  Price  float64 `json:price`
}

// func main() {
//   arr := [3]int { 3, 4, 5 }
// }

var albums = []album{
  {ID: "1", Title: "Blue Train", Artist: "John Coltrane", Price: 56.99},
  {ID: "2", Title: "Jeru", Artist: "Gerry Mulligan", Price: 17.99},
  {ID: "3", Title: "Sarah Vaughan and Clifford Brown", Artist: "Sarah Vaughan", Price: 39.99},
}

// gin.Context is the most important part of Gin.
// It carries request details, validates and serializes JSON, and more.

// Handler func
func getAlbums(context *gin.Context) {
  context.IndentedJSON(http.StatusOK, albums)
}

func postAlbum(context *gin.Context) {
  var newAlbum album

  // Bind the request body to newAlbum
  if err := context.BindJSON(&newAlbum); err != nil {
    return
  }

  // Add the new album to the slice.
  albums = append(albums, newAlbum)
  context.IndentedJSON(http.StatusCreated, newAlbum)
}

func getAlbumById(context *gin.Context) {
  id := context.Param("id")

  for _, a := range albums {
    if a.ID == id {
      context.IndentedJSON(http.StatusOK, a)
      return
    }
  }
  context.IndentedJSON(http.StatusNotFound, gin.H{"message": "Album not found"})
}

func main() {
  router := gin.Default() // Contains Logger and recovery Middleware

  router.GET("/albums", getAlbums)
  router.GET("/albums/:id", getAlbumById) // Colon identifies ID as a Path parameter
  router.POST("/albums", postAlbum)

  router.Run(":8080") // listen and serve on 0.0.0.0:8080
}
#+end_src
